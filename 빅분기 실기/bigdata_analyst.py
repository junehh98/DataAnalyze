# -*- coding: utf-8 -*-
"""BigData_Analyst.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hu3ZyQz3jTQKRAcDPl6z4q-uTee3_pOz
"""

import pandas as pd

DataUrl = 'https://raw.githubusercontent.com/Datamanim/pandas/main/lol.csv'
df = pd.read_csv(DataUrl,sep='\t')

# 데이터의 상위 5개 행을 출력하라
df.head()

# 데이터의 행과 열의 갯수를 파악하라
print(df.shape)
print('행 :', df.shape[0])
print('열 :', df.shape[1])

# 전체 컬럼을 출력하라
df.columns

# 6번째 컬럼명을 출력하라
df.columns[5]

# 6번째 컬럼의 데이터 타입을 확인하라
df.iloc[:,5].dtype

# 데이터셋의 인덱스 구성은 어떤가
df.index

# 6번째 컬럼의 3번째 값은 무엇인가?
df.iloc[2,5]

DataUrl = 'https://raw.githubusercontent.com/Datamanim/pandas/main/Jeju.csv'
df = pd.read_csv(DataUrl,encoding='euc-kr')

# 데이터 마지막 3개행을 출력하라
df.tail(3)

# 수치형 변수를 가진 컬럼을 출력하라
df.select_dtypes(exclude=object).columns

# 범주형 변수를 가진 컬럼을 출력하라
df.select_dtypes(include=object).columns

# 각 컬럼의 결측치 숫자를 파악하라
df.isnull().sum()

#각 컬럼의 데이터수, 데이터타입을 한번에 확인하라
df.info()

# 각 수치형 변수의 분포(사분위, 평균, 표준편차, 최대 , 최소)를 확인하라
df.describe()

# 거주인구 컬럼의 값들을 출력하라
df['거주인구']

# 평균 속도 컬럼의 4분위 범위(IQR) 값을 구하여라
df['평균 속도'].quantile(0.75) - df['평균 속도'].quantile(0.25)

# 읍면동명 컬럼의 유일값 갯수를 출력하라
df['읍면동명'].nunique()

# 읍면동명 컬럼의 유일값을 모두 출력하라
df['읍면동명'].unique()

DataUrl = 'https://raw.githubusercontent.com/Datamanim/pandas/main/chipo.csv'
df = pd.read_csv(DataUrl)
Ans = type(df)

Ans

# quantity컬럼 값이 3인 데이터를 추출하여 첫 5행을 출력하라
df.loc[df['quantity']==3].head() # iloc : 인덱스 번호로 접근, loc : label명으로 접근

# quantity컬럼 값이 3인 데이터를 추출하여 index를 0부터 정렬하고 첫 5행을 출력하라
df.loc[df['quantity']==3].head().reset_index(drop=True)

# quantity , item_price 두개의 컬럼으로 구성된 새로운 데이터 프레임을 정의하라
df2 = df[['quantity','item_price']]
df2

# item_price 컬럼의 달러표시 문자를 제거하고 float 타입으로 저장하여 new_price 컬럼에 저장하라
# https://www.datamanim.com/dataset/99_pandas/pandasMain.html
df['new_price'] = df['item_price'].str[1:].astype('float')
df['new_price'].head()

# new_price 컬럼이 5이하의 값을 가지는 데이터프레임을 추출하고, 전체 갯수를 구하여라
print(df['new_price'] <= 5)
len(df.loc[df.new_price <= 5])

# item_name명이 Chicken Salad Bowl 인 데이터 프레임을 추출하라고 index 값을 초기화 하여라
df.loc[df.item_name == 'Chicken Salad Bowl'].reset_index(drop = True)

# new_price값이 9 이하이고 item_name 값이 Chicken Salad Bowl 인 데이터 프레임을 추출하라
df.loc[(df.new_price <= 9) & (df.item_name == 'Chicken Salad Bowl')]

# df의 new_price 컬럼 값에 따라 오름차순으로 정리하고 index를 초기화 하여라
df.sort_values('new_price').reset_index(drop=True)

# df의 item_name 컬럼 값중 Chips 포함하는 경우의 데이터를 출력하라
df.loc[df.item_name.str.contains('Chips')]

#df의 짝수번째 컬럼만을 포함하는 데이터프레임을 출력하라
df.iloc[:,::2]

# df의 new_price 컬럼 값에 따라 내림차순으로 정리하고 index를 초기화 하여라
df.sort_values('new_price', ascending=False).reset_index(drop=True)

# df의 item_name 컬럼 값이 Steak Salad 또는 Bowl 인 데이터를 인덱싱하라
df.loc[(df.item_name == 'Steak Salad') | (df.item_name =='Bowl')]

'''
df의 item_name 컬럼 값이 Steak Salad 또는 Bowl 인 데이터를 데이터 프레임화 한 후, 
item_name를 기준으로 중복행이 있으면 제거하되 첫번째 케이스만 남겨라.
'''
result = df.loc[(df.item_name == 'Steak Salad') | (df.item_name =='Bowl')]
result.drop_duplicates('item_name') # 중복제거

# df의 데이터 중 new_price값이 new_price값의 평균값 이상을 가지는 데이터들을 인덱싱하라
import statistics as stat
a = stat.mean(df.new_price)
df.loc[(df.new_price >= a)]

df.loc[(df.new_price >= df.new_price.mean())]

# df의 데이터 중 item_name의 값이 Izze 데이터를 Fizzy Lizzy로 수정하라
df.loc[df.item_name =='Izze', 'item_name'] == 'Fizzy Lizzy'

# df의 데이터 중 choice_description 값이 NaN 인 데이터의 갯수를 구하여라
df.choice_description.isnull().sum()

# df의 데이터 중 choice_description 값이 NaN 인 데이터를 NoData 값으로 대체하라(loc 이용)
df.loc[df.choice_description.isnull(),'choice_description'] ='NoData'

# df의 데이터 중 choice_description 값에 Black이 들어가는 경우를 인덱싱하라.
Ans = df[df.choice_description.str.contains('Black')]
Ans

# df의 데이터 중 choice_description 값에 Vegetables 들어가지 않는 경우의 갯수를 출력하라.
len(df[~df.choice_description.str.contains('Vegetables')])

# df의 데이터 중 item_name 값이 N으로 시작하는 데이터를 모두 추출하라
df[df.item_name.str.startswith('N')]

# df의 데이터 중 item_name 값의 단어갯수가 15개 이상인 데이터를 인덱싱하라
df[df.item_name.str.len() >= 15]

# df의 데이터 중 new_price값이 lst에 해당하는 경우의 데이터 프레임을 구하고 그 갯수를 출력하라
lst =[1.69, 2.39, 3.39, 4.45, 9.25, 10.98, 11.75, 16.98]
df[df.new_price.isin(lst)]

# 뉴욕 airBnB : https://www.kaggle.com/ptoscano230382/air-bnb-ny-2019 
df= pd.read_csv('https://raw.githubusercontent.com/Datamanim/pandas/main/AB_NYC_2019.csv')
# 데이터를 로드하고 상위 5개 컬럼을 출력하라
df.head(5)

# 데이터의 각 host_name의 빈도수를 구하고 host_name으로 정렬하여 상위 5개를 출력하라
df.groupby('host_name').size()
df.host_name.value_counts().sort_index()

# 데이터의 각 host_name의 빈도수를 구하고 빈도수 기준 내림차순 정렬한 데이터 프레임을 만들어라. 
# 빈도수 컬럼은 counts로 명명하라
df.groupby('host_name').size().\
                to_frame().rename(columns={0:'counts'}).\
                sort_values('counts',ascending=False)

# neighbourhood_group의 값에 따른 neighbourhood컬럼 값의 갯수를 구하여라
df.groupby(['neighbourhood_group', 'neighbourhood'], as_index=False).size()

# neighbourhood_group의 값에 따른 neighbourhood컬럼 값 중 
# neighbourhood_group그룹의 최댓값들을 출력하라
df.groupby(['neighbourhood_group', 'neighbourhood'], as_index=False).size()\
.groupby(['neighbourhood_group'], as_index=False).max()

df[['neighbourhood_group', 'price']].groupby('neighbourhood_group').agg(['mean', 'var','max','min'])